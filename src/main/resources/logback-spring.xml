<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds">
  <!--Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다.-->
  <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>
  <property resource="logback-local.properties"/><!-- 로그 파일이 저장될 경로 -->

  <!-- 공통 프로퍼티 -->
  <property name="LOG_PATH" value="${log.config.path}"/> <!-- log file path -->
  <property name="LOG_FILE_NAME" value="${log.config.filename}"/> <!-- log file name -->
  <property name="ERR_LOG_FILE_NAME" value="err_log"/>
  <property name="LOG_PATTERN_CONSOLE" value="%green(%d{yy-MM-dd HH:mm:ss}) %magenta([%thread]) %highlight(%-5level) %cyan([%logger{0}:%line]) - %msg%n"/>
  <property name="LOG_PATTERN_FILE" value="%d{yy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{0}:%line] - %msg%n"/>

  <!-- Console Appender -->
  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${LOG_PATTERN_CONSOLE}</pattern>
    </encoder>
  </appender>

  <!-- File Appender -->
  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 파일경로 설정 -->
    <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>

    <!-- 출력패턴 설정-->
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${LOG_PATTERN_FILE}</pattern>
    </encoder>

    <!-- Rolling 정책 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
      <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- 파일당 최고 용량 kb, mb, gb -->
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
      <maxHistory>30</maxHistory>
    </rollingPolicy>
  </appender>

  <!-- 에러의 경우 파일에 로그 처리 -->
  <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>error</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
    <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <pattern>${LOG_PATTERN}</pattern>
    </encoder>
    <!-- Rolling 정책 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
      <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <!-- 파일당 최고 용량 kb, mb, gb -->
        <maxFileSize>10MB</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
      <maxHistory>60</maxHistory>
    </rollingPolicy>
  </appender>


  <!-- jdbc 로깅할지 여부 -->
  <logger name="jdbc" level="INFO"/>
  <!-- hibernate 로깅할지 여부 -->
  <logger name="org.hibernate.SQL" level="INFO"/>
  <!-- sql문만 로깅할지 여부 -->
  <logger name="jdbc.sqlonly" level="INFO"/>
  <!-- 쿼리문 수행시간 로깅 여부 -->
  <logger name="jdbc.sqltiming" level="OFF"/>
  <!-- ResultSet외 모든 JDBC 호출 정보 로깅할지 여부 -->
  <logger name="jdbc.audit" level="INFO"/>
  <!-- connection open close 로깅 여부 -->
  <logger name="jdbc.connection" level="OFF"/>

  <!-- Default 세팅 -->
  <root level="${LOG_LEVEL}">
    <appender-ref ref="CONSOLE"/>
<!--    <springProfile name="dev || prod">-->
<!--      <appender-ref ref="FILE"/>-->
<!--      <appender-ref ref="Error"/>-->
<!--    </springProfile>-->
  </root>
</configuration>